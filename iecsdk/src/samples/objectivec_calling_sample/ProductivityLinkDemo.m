/***** INTEL CONFIDENTIAL*** *** Copyright (October 2008) (October 2008) Intel Corporation All Rights Reserved. *** The source code contained or described herein and all documents related to the*** source code ("Material") are owned by Intel Corporation or its suppliers or *** licensors. Title to the Material remains with Intel Corporation or its *** suppliers and licensors. The Material contains trade secrets and proprietary *** and confidential information of Intel or its suppliers and licensors. *** The Material is protected by worldwide copyright and trade secret laws *** and treaty provisions. No part of the Material may be used, copied, *** reproduced, modified, published, uploaded, posted, transmitted, distributed,*** or disclosed in any way without Intel’s prior express written permission.****** No license under any patent, copyright, trade secret or other intellectual*** property right is granted to or conferred upon you by disclosure or delivery*** of the Materials, either expressly, by implication, inducement, estoppel or*** otherwise. Any license under such intellectual property rights must be *** express and approved by Intel in writing.**///-----------------------------------------------------------------------------// headers inclusion//-----------------------------------------------------------------------------#include <assert.h>#import <Foundation/NSObject.h>#import "ProductivityLink.h"//-----------------------------------------------------------------------------// calling Objective-C sample code//-----------------------------------------------------------------------------int main() {

	int ret = PL_FAILURE;
    int pld = PL_INVALID_DESCRIPTOR;    unsigned int counters_count = 4;    const char *application_name = "my_Objective-C_application";    const char *counters_names[] = {	    "The Amazing A Counter",	    "The not so bad B Counter",	    "Counter C",	    "Counter D"    };    uuid_t uuid;    unsigned long long val1 = 987654321;    unsigned long long val2 = 123456789;	//-------------------------------------------------------------------------	// create, allocate and initialize productivity link object	//-------------------------------------------------------------------------    ProductivityLink *productivity_link = [
		[ProductivityLink alloc] 
		init
	];
	//-------------------------------------------------------------------------	// create and open a PL	//-------------------------------------------------------------------------	pld = [		productivity_link 		PlOpen: 		(char *)application_name andcounters_count: 		counters_count andcounters_names: 		counters_names andpuuid:		&uuid	];	assert(pld != PL_INVALID_DESCRIPTOR);	//-------------------------------------------------------------------------	// write few counters	//-------------------------------------------------------------------------	ret = [		productivity_link		PlWrite: 		pld andpvalue: 		&val1 andoffset: 		0	];	assert(ret == PL_SUCCESS);	ret = [		productivity_link 		PlWrite: 		pld andpvalue: 		&val2 andoffset:		1	];	assert(ret == PL_SUCCESS);	//-------------------------------------------------------------------------	// close the PL	//-------------------------------------------------------------------------	ret = [		productivity_link 		PlClose: 		pld	];	assert(ret == PL_SUCCESS);	//-------------------------------------------------------------------------	// free memory	//-------------------------------------------------------------------------    [productivity_link release];
	return(PL_SUCCESS);}